{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","image/covid.png"],"names":["module","exports","url","fetchData","country","a","changeableUrl","console","log","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","fetchCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Cards","props","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","App","state","fetchedData","setState","this","image","src","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb4e3929.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__RW7GL\",\"card\":\"Cards_card__1rMx0\",\"infected\":\"Cards_infected__bTD7K\",\"recovered\":\"Cards_recovered__3k6Cn\",\"deaths\":\"Cards_deaths__2uwUd\"};","import axios from 'axios'\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async(country) => {\r\n    \r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n        console.log(changeableUrl);\r\n        \r\n         try{\r\n            const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl);\r\n            return { confirmed, recovered, deaths, lastUpdate };        \r\n            } catch (error){\r\n                console.log(error);\r\n            }\r\n\r\n    }else{\r\n        try{\r\n                const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(url);\r\n                return { confirmed, recovered, deaths, lastUpdate };        \r\n            } catch (error){\r\n                console.log(error);\r\n            }\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport const fetchDailyData = async() => {\r\n    try{\r\n\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n        \r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const countries = async() => {\r\n    try{\r\n        const {data : { countries }} = await axios.get(`${url}/countries`)\r\n        return countries.map((country) => country.name)\r\n        \r\n    }catch (error){\r\n        console.log(error);        \r\n    }\r\n}","import React,{ useState,useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport styles  from './Chart.module.css'\r\n\r\nconst Chart = ({data:{confirmed,deaths,recovered}, country}) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        \r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ?\r\n        (<Line\r\n            data= {{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets:[{\r\n                    data : dailyData.map(({ confirmed }) => confirmed),\r\n                    label : 'Infected',\r\n                    borderColor:'#3333ff',\r\n                    fill: true,\r\n                },{\r\n                    data : dailyData.map(({ deaths }) => deaths),\r\n                    label : 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor:'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }]\r\n            }}\r\n        />): null\r\n    );\r\n\r\n    console.log(confirmed, recovered, deaths);\r\n    \r\n\r\n    const barChart = (\r\n        confirmed\r\n        ?\r\n        (\r\n            <Bar\r\n                data={{\r\n                    labels:['Infected', 'Recovered','Deaths'],\r\n                    datasets:[{\r\n                        label:'People',\r\n                        backgroundColor:[\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)',\r\n                        ],\r\n                        data:[confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                }}\r\n\r\n                options={{\r\n                    legend:{display:false},\r\n                    title:{display:true, text:`Current state in ${country}`},\r\n                }}\r\n            />\r\n        ):null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { countries } from '../../api'\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const [fetchCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountries = async () => {\r\n            setFetchedCountries(await countries());\r\n        }\r\n        \r\n        \r\n        fetchCountries();\r\n    },[setFetchedCountries]);\r\n    return (\r\n        \r\n            <FormControl className={styles.formControl}>\r\n                <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                    <option value=\"\">Global</option>\r\n                    {fetchCountries.map((country,i) => <option key={i} value={country}>{country}</option>)}\r\n                </NativeSelect>\r\n            </FormControl>\r\n        \r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = (props) => {\r\n    const confirmed = props.data.confirmed;\r\n    const recovered = props.data.recovered;\r\n    const deaths = props.data.deaths;\r\n    const lastUpdate = props.data.lastUpdate;\r\n\r\n\r\n    if(!props.data.confirmed){\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n         <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of active cases of COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of recoveries from COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              Number of deaths caused by COVID-19.\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React, { Component } from 'react'\r\n\r\nimport { Cards, Chart, CountryPicker } from './components'\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api'\r\nimport image from './image/covid.png';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        data: {},\r\n        country:''\r\n    }\r\n\r\n    async componentDidMount(){\r\n\r\n        const fetchedData = await fetchData();\r\n        \r\n        this.setState({ data : fetchedData })\r\n                \r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n\r\n        console.log(fetchedData, country);\r\n        \r\n        this.setState({ data : fetchedData, country:country })\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        const {data, country} = this.state;\r\n\r\n        return (\r\n             <div className={styles.container}>\r\n                <img className={styles.image} src={image} alt=\"COVID-19\" />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} /> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1fPKP\",\"image\":\"App_image__3aqCC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1ZTxq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__153cF\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}